# This is a GitHub Actions workflow file that defines a CI/CD pipeline for an Elixir application.
# It leverages Docker's multi-stage build cache to efficiently build the application and run tests.
name: Test

# Controls when the action will run.
on:
  # Triggers the workflow on push request on any branch that is not main.
  push:
    branches: ["**", "!main"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  test:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Prepare environment file for Docker Compose
      # docker-compose will automatically use the .env file
      - name: Set up environment file
        run: cp .env.example .env

      # 3. Build the Docker image using the 'development' stage
      # This single step leverages the Dockerfile's layer caching.
      # The 'deps' layer will be reused if mix.lock hasn't changed, making this step very fast.
      # The GitHub Actions cache for deps/_build is no longer needed.
      - name: Build the Docker image
        run: docker compose build app

      # 4. Generate a secret key if needed for tests
      # This runs inside the container we just built
      - name: Generate Phoenix secret key
        run: |
          SECRET=$(docker compose run --rm -T app mix phx.gen.secret)
          sed -i "s/SECRET_KEY_BASE=.*/SECRET_KEY_BASE=$SECRET/" .env

      # 5. Run database setup and migrations in the test environment
      # It's good practice to run this before tests
      - name: Setup test database
        run: |
          docker compose run --rm -e MIX_ENV=test app mix ecto.create
          docker compose run --rm -e MIX_ENV=test app mix ecto.migrate

      # 6. Run the automated tests inside the container
      # The MIX_ENV=test flag ensures it uses the test configuration and database.
      - name: Run automated tests
        run: docker compose run --rm -e MIX_ENV=test app mix test