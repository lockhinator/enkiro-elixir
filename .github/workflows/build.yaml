# This workflow builds, tests, and pushes the production Docker image.
# It leverages Docker's multi-stage build cache for maximum efficiency.
name: Build and Push Production Image

# Controls when the action will run.
on:
  # Triggers the workflow on push requests to the main branch.
  push:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  build_and_push:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for multi-platform builds (optional but good practice)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Log in to your container registry (e.g., Docker Hub, GHCR)
      # Replace with your registry and secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Build the final production image
      # This builds the 'final' stage from your Dockerfile.
      # Docker's layer cache is used automatically, making it very fast.
      - name: Build production image
        run: docker compose build final

      # 6. Run tests against the production build environment
      # This ensures the code works within the final release context.
      # Note: We run a command in the 'release' stage container, as the 'final' image lacks the test tooling.
      - name: Run smoke tests
        run: docker compose run --rm release mix test

      # 7. Tag and push the final image to the registry
      # This pushes the slim, production-ready image from the 'final' stage.
      - name: Push image to registry
        run: docker compose push final